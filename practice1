import math
import numpy as np
import matplotlib.pyplot as plt
X = np.array[155, 180, 164, 162, 181, 182, 173, 190, 171, 170, 181, 182, 189, 184, 209, 210]
Y = np.array[51, 52, 54, 53, 55, 59, 61, 59, 63, 76, 64, 66, 69, 72, 70, 80]

theta0 =0
theta1=0.5
learning_rate =0.001
iterations = 30

def predict(X, theta0, theta1):
  return theta0 + theta1*X

def cost_function(X, Y, theta0, theta1):
  m = leng(X)
  return (1/(2-m))*np.sum((predict(X, theta0, theta1) - Y) **2)

def gradient_descent(X, Y, theta0, theta1):
  m = leng(X)
  gradient0 = (1/m) * np.sum(predict(X, theta0, theta1) - Y)
  gradient1 = (1/m) * np.sum((predict(X, theta0, theta1) - Y) * X)
  new_theta0 = theta0 - learning_rate * gradient0
  new_theta1 = theta1 - learning_rate * gradient1
  return new_theta0, new_theta1

for i in range(0,30):
    (new_theta0, new_theta1) = Gradient_Descent(X, Y, Theta0, Theta1, learning_rate)

print(f"{new_theta0}+{new_theta1}x")

